export const commands: ({
    command: string;
    describe: string;
    builder: {
        type: {
            type: string;
            alias: string;
            default: string;
            choices: string[];
            describe: string;
        };
        quiet: {
            type: string;
            alias: string;
            default: boolean;
            describe: string;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: typeof import("parse-duration").default;
        };
    };
    handler({ ctx: { ipfs, print }, ipfsPath, type, quiet, cidBase, timeout }: {
        ctx: import("../../types.js").Context;
        ipfsPath: string[];
        type: "recursive" | "all" | "direct" | "indirect";
        quiet: boolean;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        recursive: {
            type: string;
            alias: string;
            default: boolean;
            describe: string;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: typeof import("parse-duration").default;
        };
    };
    handler({ ctx, ipfsPath, timeout, recursive, cidBase }: {
        ctx: import("../../types.js").Context;
        ipfsPath: string[];
        recursive: boolean;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map